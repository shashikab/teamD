components:
  requestBodies:
    Order:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Order'
      description: Order object that needs to be added
      required: true
  schemas:
    Error:
      properties:
        code:
          format: int64
          type: integer
        description:
          description: A detail description about the error message.
          type: string
        error:
          description: If there are more than one error list them out. Ex. list out
            validation errors by each field.
          items:
            $ref: '#/components/schemas/ErrorListItem'
          type: array
        message:
          description: Error message.
          type: string
        moreInfo:
          description: Preferably an url with more details about the error.
          type: string
      required:
      - code
      - message
      title: Error object returned with 4XX HTTP status
    ErrorListItem:
      properties:
        code:
          format: int64
          type: integer
        message:
          description: Description about individual errors occurred
          type: string
      required:
      - code
      - message
      title: Description of individual errors that may have occurred during a request.
    MenuItem:
      properties:
        description:
          type: string
        image:
          type: string
        name:
          type: string
        price:
          type: string
      required:
      - name
      title: Pizza menu Item
    Order:
      properties:
        address:
          type: string
        creditCardNumber:
          type: string
        customerName:
          type: string
        delivered:
          type: boolean
        orderId:
          type: string
        pizzaType:
          type: string
        quantity:
          type: number
      required:
      - orderId
      title: Pizza Order
  securitySchemes:
    default:
      flows:
        implicit:
          authorizationUrl: https://test.com
          scopes: {}
      type: oauth2
info:
  contact:
    email: architecture@pizzashack.com
    name: John Doe
    url: http://www.pizzashack.com
  description: |
    This is a RESTFul API for Pizza Shack online pizza delivery store.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: PizzaShackAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /menu:
    get:
      description: Return a list of available menu items
      operationId: getMenu
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MenuItem'
                type: array
          description: OK. List of APIs is returned.
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Acceptable. The requested media type is not supported
      security:
      - default: []
      tags:
      - menu
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
      x-wso2-application-security:
        optional: false
        security-types:
        - oauth2
  /order:
    post:
      description: Create a new Order
      operationId: getOrders
      requestBody:
        $ref: '#/components/requestBodies/Order'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: Created. Successful response with the newly created object
            as entity inthe body.Location header contains URL of newly created entity.
          headers:
            Content-Type:
              description: The content type of the body.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: The URL of the newly created resource.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. Invalid request or validation error.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unsupported Media Type. The entity of the request was in a
            not supported format.
      security:
      - default: []
      tags:
      - order
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
      x-wso2-application-security:
        optional: false
        security-types:
        - oauth2
  /order/{orderId}:
    delete:
      description: Delete an existing Order
      operationId: deleteOrder
      responses:
        "200":
          description: OK. Resource successfully deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. Resource to be deleted does not exist.
      security:
      - default: []
      tags:
      - order
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
      x-wso2-application-security:
        optional: false
        security-types:
        - oauth2
    get:
      description: Get details of an Order
      operationId: getOrderById
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: OK Requested Order will be returned
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. Requested API does not exist.
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Acceptable. The requested media type is not supported
      security:
      - default: []
      tags:
      - order
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
      x-wso2-application-security:
        optional: false
        security-types:
        - oauth2
    parameters:
    - description: Order Id
      explode: false
      in: path
      name: orderId
      required: true
      schema:
        format: string
        type: string
      style: simple
    put:
      description: Update an existing Order
      operationId: updateOrder
      requestBody:
        $ref: '#/components/requestBodies/Order'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: OK. Successful response with updated Order
          headers:
            Content-Type:
              description: The content type of the body.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: The URL of the newly created resource.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. Invalid request or validation error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found. The resource to be updated does not exist.
      security:
      - default: []
      tags:
      - order
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
      x-wso2-application-security:
        optional: false
        security-types:
        - oauth2
security:
- default: []
servers:
- url: https://localhost:9443/am/sample/pizzashack/v1/api
tags:
- description: Operations related to menu management.
  name: menu
- description: Operations related to order management.
  name: order
x-wso2-api-key-header: ApiKey
x-wso2-application-security:
  optional: false
  security-types:
  - oauth2
x-wso2-auth-header: Authorization
x-wso2-basePath: /pizzashack/1.0.0
x-wso2-cors:
  accessControlAllowCredentials: false
  accessControlAllowHeaders:
  - authorization
  - Access-Control-Allow-Origin
  - Content-Type
  - SOAPAction
  - apikey
  - Internal-Key
  accessControlAllowMethods:
  - GET
  - PUT
  - POST
  - DELETE
  - PATCH
  - OPTIONS
  accessControlAllowOrigins:
  - '*'
  corsConfigurationEnabled: false
x-wso2-production-endpoints:
  type: http
  urls:
  - https://localhost:9443/am/sample/pizzashack/v1/api/
x-wso2-response-cache:
  cacheTimeoutInSeconds: 300
  enabled: false
x-wso2-sandbox-endpoints:
  type: http
  urls:
  - https://localhost:9443/am/sample/pizzashack/v1/api/
x-wso2-transports:
- http
- https
